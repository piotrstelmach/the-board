// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  password  String
  roles     Int        @default(1)
  tasks     Task[]
  comments  Comment[]
  auditLogs AuditLog[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Task {
  id          Int          @id @default(autoincrement())
  title       String
  description String?
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  storyPoints Int?
  assigneeId  Int?
  assignee    User?        @relation(fields: [assigneeId], references: [id])
  sprintId    Int?
  sprint      Sprint?      @relation(fields: [sprintId], references: [id])
  storyId     Int?
  story       UserStory?   @relation(fields: [storyId], references: [id])
  comments    Comment[]
  auditLogs   AuditLog[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Sprint {
  id          Int      @id @default(autoincrement())
  name        String
  goal        String?
  startDate   DateTime
  endDate     DateTime
  tasks       Task[]
  totalPoints Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserStory {
  id          Int          @id @default(autoincrement())
  title       String
  description String?
  priority    TaskPriority @default(MEDIUM)
  status      StoryStatus  @default(PLANNED)
  epicId      Int?
  epic        Epic?        @relation(fields: [epicId], references: [id])
  tasks       Task[]
  storyPoints Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Epic {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  stories     UserStory[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  taskId    Int
  task      Task     @relation(fields: [taskId], references: [id])
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  action    String
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  taskId    Int?
  task      Task?    @relation(fields: [taskId], references: [id])
  timestamp DateTime @default(now())
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  BLOCKED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum StoryStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Role {
  DEVELOPER
  SCRUM_MASTER
  PRODUCT_OWNER
}
